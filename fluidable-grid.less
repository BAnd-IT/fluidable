//
// Grid
//

@width: 100%/@columns;

// Groups

.group {
	margin-right: @gutter / -2;
	margin-left: @gutter / -2;
	& when (@flex = true) {
		display: flex;
		flex-wrap: wrap;
	}
	& when not (@flex = true) {
		//padding: 0 @gutter;
		.clear();
	}
}

[class*="col-"] {
	min-height: 1px;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
	& when (@flex = true) {
		flex: 0 0 100%;
	}
}

.group [class*="push-"],
.group [class*="pull-"] {
	position: relative;
}

.container {
	padding-right: @gutter;
	padding-left: @gutter;
}

// Columns

.createbreakpoints(@x:2) when(@x <= length(@breakPoints)) {
    @name: extract(extract(@breakPoints, @x),1);
    @media (min-width: extract(extract(@breakPoints, @x),2)) {
		.container {
			max-width: extract(extract(@breakPoints, @x),2) - (@gutter * 2);
			.center-block();
		}
    	.createcolclasses(@y:1) when(@y <= @columns) {
    		.col-@{name}-@{y} {
    			& when (@flex = true) {
					flex: 0 0 calc((@width * @y) ~"-" @gutter);	
					margin: 0 @gutter / 2;
				}
				& when not (@flex = true) {
					width: @width * @y;
					float: left;
					padding-right: @gutter / 2;
					padding-left: @gutter / 2;
				}
    		}
    		.createcolclasses((@y + 1));
    	}
    	.createcolclasses();
    	.createpullpushclasses(@y:0) when(@y <= @columns) {
    		.col-@{name}-offset-@{y} {
 				margin-left: @width * @y;
 			}
 			.col-@{name}-pull-@{y} {
				right: @width * @y;
			}
			.col-@{name}-push-@{y} {
				left: @width * @y;
			}
    		.createpullpushclasses((@y + 1));
    	}
    	.createpullpushclasses();
	}
    .createbreakpoints((@x + 1));
}
.createbreakpoints();

// Auto

.col-auto {
	& when (@flex = true) {
		flex: 1 0 auto;
	}
}

// Clear

.clear {
	&:after {
    	display: table;
    	clear: both;
    	content: " ";
	}
}